date命令
lastday=`date -d "yesterday" +"%Y-%m-%d"`

　　date命令的功能是显示和设置系统日期和时间。
　　该命令的一般格式为： date [选项] 显示时间格式（以+开头，后面接格式）
　　date 设置时间格式
　　命令中各选项的含义分别为：
　　-d datestr, --date datestr 显示由datestr描述的日期
　　-s datestr, --set datestr 设置datestr 描述的日期
　　-u, --universal 显示或设置通用时间
时间域
　　% H 小时（00..23）
　　% I 小时（01..12）
　　% k 小时（0..23）
　　% l 小时（1..12）
　　% M 分（00..59）
　　% p 显示出AM或PM
　　% r 时间（hh：mm：ss AM或PM），12小时
　　% s 从1970年1月1日00：00：00到目前经历的秒数
　　% S 秒（00..59）
　　% T 时间（24小时制）（hh:mm:ss）
　　% X 显示时间的格式（％H:％M:％S）
　　% Z 时区 日期域
　　% a 星期几的简称（ Sun..Sat）
　　% A 星期几的全称（ Sunday..Saturday）
　　% b 月的简称（Jan..Dec）
　　% B 月的全称（January..December）
　　% c 日期和时间（ Mon Nov 8 14：12：46 CST 1999）
　　% d 一个月的第几天（01..31）
　　% D 日期（mm／dd／yy）
　　% h 和%b选项相同
　　% j 一年的第几天（001..366）
　　% m 月（01..12）
　　% w 一个星期的第几天（0代表星期天）
　　% W 一年的第几个星期（00..53，星期一为第一天）
　　% x 显示日期的格式（mm/dd/yy）
　　% y 年的最后两个数字（ 1999则是99）
　　% Y 年（例如：1970，1996等）
　　需要特别说明的是，只有超级用户才能用date命令设置时间，一般用户只能用date命令显示时间。
　　例1：用指定的格式显示时间。
　　$ date ‘+This date now is =>%x ，time is now =>%X ，thank you !'
　　This date now is =>11/12/99 ，time is now =>17:53:01 ，thank you !
　　例2：用预定的格式显示当前的时间。
　　# date
　　Fri Nov 26 15：20：18 CST 1999
　　例3：设置时间为下午14点36分。
　　# date -s 14:36:00
　　Fri Nov 26 14：15：00 CST 1999
　　例4：设置时间为1999年11月28号。
　　# date -s 991128
　　Sun Nov 28 00：00：00 CST 1999
      例5：设置一天前
     date --date "1 days ago" +"%Y-%m-%d"
Date 命令参数小技巧
LastUpdated:2006-03-27
By:Gman!
-for beginner:wink:此参数可以用于日志处理和时间统计;
由于Linux对man date -d 参数说的比较模糊,故举例如下:
# -d, --date=STRING  display time described by STRING, not `now'
For Linux
[root@Gman root]# date -d next-day +%Y%m%d
20060328
[root@Gman root]# date -d last-day +%Y%m%d
20060326
[root@Gman root]# date -d yesterday +%Y%m%d
20060326
[root@Gman root]# date -d tomorrow +%Y%m%d
20060328
[root@Gman root]# date -d last-month +%Y%m
200602
[root@Gman root]# date -d next-month +%Y%m
200604
[root@Gman root]# date -d next-year +%Y
2007
------------------------------------------------------------------------------
而FreeBSD则不同;举例如下:
For FreeBSD
bash-2.05b# date -v -1d +%Y%m%d
20060326
bash-2.05b#  date -v -1m +%Y%m%d
20060227
bash-2.05b#  date -v -1y +%Y%m%d
20050327

 linux date -d参数用法

 最近偶为了写一个调整时间的shell而绞尽脑汁,结果在某一天
#info data
这里面看到了data -d参数的灵活用法,真是欣喜若狂。好东西要保存,整理整理:

   * To print the date of the day before yesterday:

          date --date='2 days ago'

   * To print the date of the day three months and one day hence:

          date --date='3 months 1 day'

   * To print the day of year of Christmas in the current year:

          date --date='25 Dec' +%j

   * To print the current full month name and the day of the month:

          date '+%B %d'

     But this may not be what you want because for the first nine days
     of the month, the `%d' expands to a zero-padded two-digit field,
     for example `date -d 1may '+%B %d'' will print `May 01'.

   * To print a date without the leading zero for one-digit days of the
     month, you can use the (GNU extension) `-' flag to suppress the
     padding altogether:

          date -d 1may '+%B %-d

   * To print the current date and time in the format required by many
     non-GNU versions of `date' when setting the system clock:

          date +%m%d%H%M%Y.%S

   * To set the system clock forward by two minutes:

          date --set='+2 minutes'

   * To print the date in RFC 2822 format, use `date --rfc-2822'.  Here
     is some example output:

          Fri, 09 Sep 2005 13:51:39 -0700

   * To convert a date string to the number of seconds since the epoch
     (which is 1970-01-01 00:00:00 UTC), use the `--date' option with
     the `%s' format.  That can be useful in sorting and/or graphing
     and/or comparing data by date.  The following command outputs the
     number of the seconds since the epoch for the time two minutes
     after the epoch:

          date --date='1970-01-01 00:02:00 +0000' +%s

          date --date='1970-01-01 00:02:00 +0000' +%s
          120

     If you do not specify time zone information in the date string,
     `date' uses your computer's idea of the time zone when
     interpreting the string.  For example, if your computer's time
     zone is that of Cambridge, Massachusetts, which was then 5 hours
     (i.e., 18,000 seconds) behind UTC:

          # local time zone used
          date --date='1970-01-01 00:02:00' +%s
          18120

   * If you're sorting or graphing dated data, your raw date values may
     be represented as seconds since the epoch.  But few people can
     look at the date `946684800' and casually note "Oh, that's the
     first second of the year 2000 in Greenwich, England."

          date --date='2000-01-01 UTC' +%s
          946684800

     An alternative is to use the `--utc' (`-u') option.  Then you may
     omit `UTC' from the date string.  Although this produces the same
     result for `%s' and many other format sequences, with a time zone
     offset different from zero, it would give a different result for
     zone-dependent formats like `%z'.

          date -u --date=2000-01-01 +%s
          946684800

     To convert such an unwieldy number of seconds back to a more
     readable form, use a command like this:

          # local time zone used
          date -d '1970-01-01 UTC 946684800 seconds' +"%Y-%m-%d %T %z"
          1999-12-31 19:00:00 -0500

     Often it is better to output UTC-relative date and time:

          date -u -d '1970-01-01 946684800 seconds' +"%Y-%m-%d %T %z"
          2000-01-01 00:00:00 +0000
