pipeline {
  agent {
    node {
      //------ 分配任务给打了下述标签的 worker
      label 'pipeline_only'
      //------ 指定干活的路径
      customWorkspace '/data/server/jenkins_worker/pipeline_only/demoproject/src/demoproject'
    }
  }

  parameters {
    //------ 定义参数(环境变量)
    string(name: 'SVC_NAMES', defaultValue: 'svc1,svc2,svc3,svc4,svc5', description: '微服务列表')
    string(name: 'SVC_VERSION', defaultValue: 'EMPTY', description: '请指定`docker镜像`的`tag`，默认将提取 `git rev`值')
    choice(name: 'SWARM_ENV', choices: 'dev\ntest', description: '请选择运行环境')
    choice(name: 'GIT_BRANCH_NAME', choices: 'refs/heads/develop\nrefs/heads/release', description: '请选择 git 分支')
    booleanParam(name: 'NEED_UNDO', defaultValue: false, description: '可选的回滚步骤')
  }

  tools {
    //------ 指定全局定义的依赖工具，此处为 golang 环境
    go 'golangtools'
  }

  environment {
    // 定义 golang 环境变量
    GOPATH = '/data/server/jenkins_worker/pipeline_only/demoproject'
  }

  stages {
    stage('Pre-build') {
      steps {
        echo '[+] 准备环境'
        echo '[@] Jenkinsfile for jenkins(current ver.2.73.3) pipeline'
        echo "[-] --> 任务链接：${BUILD_URL}"
        //------ workspace
        //echo '[-] --> 检查 WORKSPACE 是否正确'
        //sh 'echo "pwd = $(pwd)"'
        //------ golang
        echo '[-] --> 检查 golang 环境'
        sh 'go version'
        //sh 'go env'
        echo '[-] --> 列出 GOPATH'
        sh 'tree -L 1 ${GOPATH}'
        echo '[+] 检查参数：'
        echo "[-] --> SVC_NAMES = ${params.SVC_NAMES}"
        echo "[-] --> SVC_VERSION = ${params.SVC_VERSION}"
        echo "[-] --> SWARM_ENV = ${params.SWARM_ENV}"
        echo "[-] --> GIT_BRANCH_NAME = ${params.GIT_BRANCH_NAME}"
        echo "[-] --> NEED_UNDO = ${params.NEED_UNDO}"
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('Checkout') {
      when {
          //------ 只有 dev 需要执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] 准备代码...'
        echo '[-] --> git 签出'
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.GIT_BRANCH_NAME}"
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: '11223344-1111-2222-3333-444444555555',
            url: 'git@example.com:group1/demoproject.git'
          ]]
        ])
        echo '[-] --> git 变更日志（最近3条）'
        sh 'git log -3 --oneline'
        //sh 'git whatchanged -3'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('Build') {
      when {
          //------ 只有 dev 需要执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] 代码构建中...'
        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject build'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('Deploy to dev') {
      when {
          //------ 只有 dev 需要执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] 服务上线中...'
        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject rollout'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('Deploy to test') {
      when {
          //------ 只有 dev 需要执行
          environment name: 'SWARM_ENV', value: 'test'
      }
      steps {
        input([
          message: '服务上线中...(待审核)',
          ok: '同意'
        ])

        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject rollout'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('Rollback') {
      when {
          expression {
              //------ 默认不启用回滚操作
              params.NEED_UNDO == true
          }
      }
      steps {
        input([
          message: '回滚? (回滚到上一个版本)',
          ok: '确认'
        ])

        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject undo'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }
  }
}
