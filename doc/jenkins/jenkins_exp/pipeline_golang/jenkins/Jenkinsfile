pipeline {
  agent {
    node {
      //------ 分配任务给打了下述标签的 worker
      label 'pipeline_only'
      //------ 指定干活的路径
      customWorkspace '/data/server/jenkins_worker/pipeline_only/demoproject/src/demoproject'
    }
  }

  parameters {
    //------ 定义参数(环境变量)
    string(name: 'SVC_NAMES', defaultValue: 'svc1,svc2,svc3,svc4,svc5', description: '微服务列表')
    string(name: 'SVC_VERSION', defaultValue: 'EMPTY', description: '请指定`docker镜像`的`tag`，默认将提取 `git rev`值')
    choice(name: 'SWARM_ENV', choices: 'dev\ntest', description: '请选择运行环境')
    choice(name: 'GIT_BRANCH_NAME', choices: 'refs/heads/develop\nrefs/heads/release', description: '请选择 git 分支')
    booleanParam(name: 'NEED_UNDO', defaultValue: false, description: '默认不启用回滚操作(可选)')
  }

  tools {
    //------ 指定全局定义的依赖工具，此处为 golang 环境
    go 'golangtools'
  }

  environment {
    // 定义 golang 环境变量
    GOPATH = '/data/server/jenkins_worker/pipeline_only/demoproject'
  }

  stages {
    stage('初始化') {
      steps {
        echo '[@] Jenkinsfile for jenkins pipeline'
        echo "[@] __> 任务链接：${BUILD_URL}"
        //------ golang
        echo '[-] __> 检查 golang 环境'
        sh 'go version'
        //sh 'go env'
        echo '[-] __> 列出 GOPATH'
        sh 'tree -L 1 ${GOPATH}'
        echo '[+] --> 检查参数：'
        echo "[-] __> SVC_NAMES = ${params.SVC_NAMES}"
        echo "[-] __> SVC_VERSION = ${params.SVC_VERSION}"
        echo "[-] __> SWARM_ENV = ${params.SWARM_ENV}"
        echo "[-] __> GIT_BRANCH_NAME = ${params.GIT_BRANCH_NAME}"
        echo "[-] __> NEED_UNDO = ${params.NEED_UNDO}"
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('准备 git 仓库') {
      when {
          //------ 只在 dev 环境中执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] --> 获取 git 代码...'
        checkout([
          $class: 'GitSCM',
          branches: [[
            name: "${params.GIT_BRANCH_NAME}"
          ]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [],
          submoduleCfg: [],
          userRemoteConfigs: [[
            credentialsId: '11223344-1111-2222-3333-444444555555',
            url: 'git@example.com:group1/demoproject.git'
          ]]
        ])
        echo '[-] __> git 变更日志(最近3条)'
        sh 'git log -3 --oneline'
        //sh 'git whatchanged -3'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('构建') {
      when {
          //------ 只在 dev 环境中执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] 代码构建中...'
        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject build'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('部署至 dev 环境') {
      when {
          //------ 只在 dev 环境中执行
          environment name: 'SWARM_ENV', value: 'dev'
      }
      steps {
        echo '[+] 服务上线中...'
        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject rollout'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('部署至 qa 环境') {
      when {
          //------ 只在 qa 环境中执行
          environment name: 'SWARM_ENV', value: 'qa'
      }
      steps {
        script {
          userInput = input([
            message: '服务上线中...(待审核)',
            ok: '同意',
            parameters: [
              text(name: 'approvers', defaultValue: '*下述角色拥有本项目的审批权限: *\n  - Admin\n  - QA\n', description: '审核者')
            ],
            //------ 指定审核者，请使用逗号','分割(无空格)，启用请取消下面一行的注释
            //submitter: 'admin,hanmeimei,lilei',
            submitterParameter: 'approverID'

          ])
          echo "由 ${userInput['approverID']} 审核通过"
        }

        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject rollout'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }

    stage('回滚') {
      when {
          expression {
              //------ 默认不启用回滚操作(可选)
              params.NEED_UNDO == true
          }
      }
      steps {
        input([
          message: '开始回滚? (回滚到上一个版本)',
          ok: '确认'
        ])

        sh '/bin/bash /data/server/jenkins_worker/cicd/demoproject/ci.sh demoproject undo'
        echo '[-] ______________________END_OF_STAGE______________________'
      }
    }
  }
}
