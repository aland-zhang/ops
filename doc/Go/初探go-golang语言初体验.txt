初探go-golang语言初体验
2017/10/16

一、初体验
1、环境
wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.8.linux-amd64.tar.gz

cat <<'_EOF' >>/etc/profile
#golang
export PATH=$PATH:/usr/local/go/bin
export GOPATH=/opt/go
_EOF

source /etc/profile


2、教程
# go tool tour &
访问：http://127.0.0.1:3999/


3、第一个程序
# cd $GOPATH
# mkdir src/abc.com/demo/hello -p
# vim src/abc.com/demo/hello/hello.go
package main

import "fmt"

func main() {
    fmt.Printf("Hello, world.\n")
}


# go install abc.com/demo/hello
# bin/hello 
Hello, world.


4、第一个包
# mkdir src/abc.com/demo/stringutil -p
# vim src/abc.com/demo/stringutil/reverse.go
// Package stringutil contains utility functions for working with strings.
package stringutil

// Reverse returns its argument string reversed rune-wise left to right.
func Reverse(s string) string {
	r := []rune(s)
	for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	return string(r)
}

# go build abc.com/demo/stringutil
# cat src/abc.com/demo/hello/hello.go
package main

import (
	"fmt"

	"abc.com/demo/stringutil"
)

func main() {
	fmt.Printf(stringutil.Reverse("!oG ,olleH"))
}

# go install abc.com/demo/hello
# bin/hello 
Hello, Go!


5、目录结构
# tree /opt/go
/opt/go
├── bin                                 # install 后生成的可执行文件目录
│   └── hello
├── pkg                                 # install 后生成的包目录
│   └── linux_amd64
│       └── abc.com
│           └── demo
│               └── stringutil.a
└── src                                 # 源码目录
    └── abc.com
        └── demo
            ├── hello
            │   └── hello.go
            └── stringutil
                └── reverse.go

10 directories, 4 files


6、引入测试
# vim src/abc.com/demo/stringutil/reverse_test.go
package stringutil

import "testing"

func TestReverse(t *testing.T) {
	cases := []struct {
		in, want string
	}{
		{"Hello, world", "dlrow ,olleH"},
		{"Hello, 世界", "界世 ,olleH"},
		{"", ""},
	}
	for _, c := range cases {
		got := Reverse(c.in)
		if got != c.want {
			t.Errorf("Reverse(%q) == %q, want %q", c.in, got, c.want)
		}
	}
}

# go test abc.com/demo/stringutil
ok      abc.com/demo/stringutil 0.007s



7、使用远程的包
示例，从git上指定的url获取包，go get 将完成 fetch, build 和 install的操作：
# go get github.com/golang/example/hello
# bin/hello
Hello, Go examples!


8、查看当前 go 的环境变量
[root@tvm01 go]# go env
GOARCH="amd64"
GOBIN=""
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/opt/go"
GORACE=""
GOROOT="/usr/local/go"
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build679741147=/tmp/go-build"
CXX="g++"
CGO_ENABLED="1"
PKG_CONFIG="pkg-config"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"



9、重新编译go源码

1）源码
需求：使用 go get 的时候，看不到下载的进度条。
目标：调整go源码，重新编译

[root@tvm01 src]# pwd
/usr/local/go/src
[root@tvm01 src]# vim cmd/go/vcs.go
var vcsGit = &vcsCmd{
（略）
        createCmd:   []string{"clone {repo} {dir}", "-go-internal-cd {dir} submodule update --init --recursive"},
        downloadCmd: []string{"pull --ff-only", "submodule update --init --recursive"},

变更为：
        createCmd:   []string{"clone --progress {repo} {dir}", "-go-internal-cd {dir} submodule update --init --recursive"},
        downloadCmd: []string{"pull --ff-only", "submodule update --init --recursive"},

（略）  
        
func (v *vcsCmd) run1(dir string, cmdline string, keyval []string, verbose bool) ([]byte, error) {
（略）
        cmd.Stdout = &buf
        cmd.Stderr = &buf
        
变更为：
        cmd.Stdout = &buf
        cmd.Stderr = &buf
        cmd.Stdout = os.Stdout
        cmd.Stderr = os.Stderr
（略）


2）编译
[root@tvm01 src]# ./all.bash 
##### Building Go bootstrap tool.
cmd/dist
ERROR: $GOROOT_BOOTSTRAP must not be set to $GOROOT
Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4.


解决办法：编译go1.4，然后再重试
unset GOPATH
unset GOROOT


cd /opt
mkdir go1.4_src
git clone https://github.com/golang/go.git
cd go
git checkout -b 1.4.3 go1.4.3
cd src
./all.bash
cd ../..
cp -a go /root/go1.4
cd /usr/local/go

[root@tvm01 src]# ./all.bash 


重新测试：
[root@tvm01 src]# source /etc/profile

[root@tvm01 src]# go get -v github.com/docker/docker/client
github.com/docker/docker (download)
Cloning into '/opt/go/src/github.com/docker/docker'...
remote: Counting objects: 234999, done.        
remote: Compressing objects: 100% (24/24), done.        
Receiving objects:   6% (15150/234999), 4.64 MiB | 345.00 KiB/s 


符合预期。




二、试着写一个小的程序
1、设定目标
1）尽量多的用到go语言的语法基础内容：packages, variables ,functions Flow control, method, interface, concurrency
2）请求 url，获取状态等；


2、代码示例
[root@tvm01 go]# cat src/abc.com/demo/http_status/http_status.go
/*
# go demo: http_status
# 2017/3/9
*/ 

package main

import (
    "flag"
    "fmt"
    "log"
    "sync"
    "time"
    "net/http"
    "io/ioutil"
    "strings"
    "strconv"
)


type taskstat struct {
    v map[string]int
    mux sync.Mutex
}

func (ts *taskstat) Inc(key string) {
    ts.mux.Lock()
    ts.v[key]++
    ts.mux.Unlock()
}

func (ts *taskstat) Value(key string) int {
    ts.mux.Lock()
    defer ts.mux.Unlock()
    return ts.v[key]
}


func checkError(err error, method string) bool {
    if err != nil {
        log.Printf("[E] %s : %v", method, err)
        return true
    }
    return false
}


func getHosts() ([]string) {
    var hosts []string
    data, err := ioutil.ReadFile("urls.txt")
    if checkError(err, "ioutil.ReadFile") {
        return hosts
    }

    for _, h := range strings.Split(string(data), "\n") {
        if h == "" {
            continue
        }
        hosts = append(hosts, h)
    }
    return hosts
}


func request_url(seq int, url string, ch chan string, stat *taskstat) {
    head, err := http.Head(url)
    if checkError(err, "http.Head") {
        stat.Inc("failure")

        ch <- "[" + strconv.Itoa(seq)  + "]" + url + " : failed."
        return
    }

    stat.Inc("success")
    status := head.Status
    ch <- "[" + strconv.Itoa(seq) +  "]" + url + " : " + status
}


func main() {
    dt_start := time.Now()
    cnt := flag.Int("c", 10, "[] set N times to request the http url.")
    use_conf := flag.Bool("f", false, "[] parse urls from file: [urls.txt] or not?")

    flag.Parse()

    var stat = taskstat{v: make(map[string]int)}
    var hosts []string

    if *use_conf == true {
        hosts = getHosts()
    } else{
        hosts = flag.Args()
    }

    for _, url := range hosts {
        ch := make(chan string)
        for i := 0; i < *cnt; i++ {
            go request_url(i, url, ch, &stat)
        }

        for t := 0; t < *cnt; t++ {
            fmt.Println(<-ch)
        }
    }
    log.Printf("success: %d, failure: %d, Time Cost: %v\n", stat.Value("success"), stat.Value("failure"), time.Since(dt_start))
}


3、如何运行
1）直接运行
[root@tvm01 go]# go run src/abc.com/demo/http_status/http_status.go -h
Usage of /tmp/go-build822199343/command-line-arguments/_obj/exe/http_status:
  -c int
        [] set N times to request the http url. (default 10)
  -f    [] parse urls from file: [urls.txt] or not?
exit status 2

[root@tvm01 go]# go run src/abc.com/demo/http_status/http_status.go -c 3 http://www.qq.com
[2]http://www.qq.com : 200 OK
[0]http://www.qq.com : 200 OK
[1]http://www.qq.com : 200 OK
2017/03/09 17:55:50 success: 3, failure: 0, Time Cost: 36.062986ms

[root@tvm01 go]# go run src/abc.com/demo/http_status/http_status.go -c 3 http://www.qq.com http://www.360.cn
[0]http://www.qq.com : 200 OK
[2]http://www.qq.com : 200 OK
[1]http://www.qq.com : 200 OK
[2]http://www.360.cn : 200 OK
[1]http://www.360.cn : 200 OK
[0]http://www.360.cn : 200 OK
2017/03/09 17:56:21 success: 6, failure: 0, Time Cost: 569.670989ms


2）编译
当前为 linux 环境
[root@tvm01 go]# go install abc.com/demo/http_status 
运行
[root@tvm01 go]# bin/http_status -c 3 http://www.qq.com
[1]http://www.qq.com : 200 OK
[2]http://www.qq.com : 200 OK
[0]http://www.qq.com : 200 OK
2017/03/09 17:56:56 success: 3, failure: 0, Time Cost: 23.548995ms



3）交叉编译
以 windows 平台为例：
[root@tvm01 go]# GOOS="windows" go install abc.com/demo/http_status
[root@tvm01 go]# sz bin/windows_amd64/http_status.exe
下载到windows下执行，符合预期






三、FAQ
1、访问 golang.org 异常

注1：引用【docker深入2-UI之portainer的二次开发】文章的实例

构建 app

[root@dev_08 portainer]# grunt build

如果遇到这样的错误：
Building portainer for linux-amd64
/go/src/github.com/portainer/portainer/crypto/crypto.go:4:2: cannot find package "golang.org/x/crypto/bcrypt" in any of:
	/usr/local/go/src/golang.org/x/crypto/bcrypt (from $GOROOT)
	/go/src/golang.org/x/crypto/bcrypt (from $GOPATH)
/go/src/github.com/portainer/portainer/http/handler/websocket.go:21:2: cannot find package "golang.org/x/net/websocket" in any of:
	/usr/local/go/src/golang.org/x/net/websocket (from $GOROOT)
	/go/src/golang.org/x/net/websocket (from $GOPATH)
mv: cannot stat ‘api/cmd/portainer/portainer-linux-amd64’: No such file or directory
Warning: Command failed: build/build_in_container.sh linux amd64
mv: cannot stat ‘api/cmd/portainer/portainer-linux-amd64’: No such file or directory
 Use --force to continue.

Aborted due to warnings.

那是因为网络可达性问题，国内访问 golang.org 异常。
[root@dev_08 portainer]# host golang.org
golang.org is an alias for golang-consa.l.google.com.
golang-consa.l.google.com has address 216.239.37.1


导致这2个依赖下载失败：
golang.org/x/crypto/bcrypt
golang.org/x/net/websocket


解决方法：
[root@dev_08 portainer]# go get github.com/golang/crypto/tree/master/bcrypt
[root@dev_08 portainer]# go get github.com/golang/net/tree/master/websocket

[root@dev_08 portainer]# cd $GOPATH/src
[root@dev_08 src]# mkdir golang.org/x -p
[root@dev_08 src]# mv github.com/golang/* golang.org/x/


然后再切换到源码目录，调整构建脚本： 
[root@dev_08 src]# cd /opt/portainer
[root@dev_08 portainer]# vim build/build_in_container.sh
挂载本地的 $GOPATH/src/golang.org 到容器路径：/go/src/golang.org

docker run --rm -tv $(pwd)/api:/src -e BUILD_GOOS="$1" -e BUILD_GOARCH="$2" portainer/golang-builder:cross-platform /src/cmd/portainer

调整为：

docker run --rm -tv $(pwd)/api:/src -v $GOPATH/src/golang.org:/go/src/golang.org -e BUILD_GOOS="$1" -e BUILD_GOARCH="$2" portainer/golang-builder:cross-platform /src/cmd/portainer


最后重新构建一次：
[root@dev_08 portainer]# grunt build
（略）
Cleaning "dist/js/angular.37dfac18.js"...OK
Cleaning "dist/js/portainer.cab56db9.js"...OK
Cleaning "dist/js/vendor.4edc9b0f.js"...OK
Cleaning "dist/css/portainer.e7f7fdaa.css"...OK

Done, without errors.


看到上述输出，表示符合预期。






XYXW、参考
1、golang
https://golang.org/doc
https://golang.org/doc/code.html#Workspaces

2、the-way-to-go_ZH_CN
https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md

3、解决升级go版本遇到的Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4.问题
http://blog.csdn.net/qq_15437667/article/details/59776840

4、国内下载golang.org的包有什么好办法么？
https://gocn.io/question/362