初探go-golang语言初体验
2017/10/27

一、初体验
1、环境
wget https://storage.googleapis.com/golang/go1.8.linux-amd64.tar.gz
tar -C /usr/local -xzf go1.8.linux-amd64.tar.gz

cat <<'_EOF' >/etc/profile.d/golang.sh
#golang
export GOPATH=/opt/go
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
_EOF

source /etc/profile


2、教程
# go tool tour &
访问：http://127.0.0.1:3999/


3、第一个程序
# cd $GOPATH
# mkdir src/abc.com/demo/hello -p
# vim src/abc.com/demo/hello/hello.go
package main

import "fmt"

func main() {
    fmt.Printf("Hello, world.\n")
}


# go install abc.com/demo/hello
# bin/hello 
Hello, world.


4、第一个包
# mkdir src/abc.com/demo/stringutil -p
# vim src/abc.com/demo/stringutil/reverse.go
// Package stringutil contains utility functions for working with strings.
package stringutil

// Reverse returns its argument string reversed rune-wise left to right.
func Reverse(s string) string {
	r := []rune(s)
	for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {
		r[i], r[j] = r[j], r[i]
	}
	return string(r)
}

# go build abc.com/demo/stringutil
# cat src/abc.com/demo/hello/hello.go
package main

import (
	"fmt"

	"abc.com/demo/stringutil"
)

func main() {
	fmt.Printf(stringutil.Reverse("!oG ,olleH"))
}

# go install abc.com/demo/hello
# bin/hello 
Hello, Go!


5、目录结构
# tree /opt/go
/opt/go
├── bin                                 # install 后生成的可执行文件目录
│   └── hello
├── pkg                                 # install 后生成的包目录
│   └── linux_amd64
│       └── abc.com
│           └── demo
│               └── stringutil.a
└── src                                 # 源码目录
    └── abc.com
        └── demo
            ├── hello
            │   └── hello.go
            └── stringutil
                └── reverse.go

10 directories, 4 files


6、引入测试
# vim src/abc.com/demo/stringutil/reverse_test.go
package stringutil

import "testing"

func TestReverse(t *testing.T) {
	cases := []struct {
		in, want string
	}{
		{"Hello, world", "dlrow ,olleH"},
		{"Hello, 世界", "界世 ,olleH"},
		{"", ""},
	}
	for _, c := range cases {
		got := Reverse(c.in)
		if got != c.want {
			t.Errorf("Reverse(%q) == %q, want %q", c.in, got, c.want)
		}
	}
}

# go test abc.com/demo/stringutil
ok      abc.com/demo/stringutil 0.007s



7、使用远程的包
示例，从git上指定的url获取包，go get 将完成 fetch, build 和 install的操作：
# go get github.com/golang/example/hello
# bin/hello
Hello, Go examples!


8、查看当前 go 的环境变量
[root@tvm01 go]# go env
GOARCH="amd64"
GOBIN=""
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/opt/go"
GORACE=""
GOROOT="/usr/local/go"
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build679741147=/tmp/go-build"
CXX="g++"
CGO_ENABLED="1"
PKG_CONFIG="pkg-config"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"



9、重新编译go源码

1）源码
需求：使用 go get 的时候，看不到下载的进度条。
目标：调整go源码，重新编译

[root@tvm01 src]# pwd
/usr/local/go/src
[root@tvm01 src]# vim cmd/go/vcs.go
var vcsGit = &vcsCmd{
（略）
        createCmd:   []string{"clone {repo} {dir}", "-go-internal-cd {dir} submodule update --init --recursive"},
        downloadCmd: []string{"pull --ff-only", "submodule update --init --recursive"},

变更为：
        createCmd:   []string{"clone --progress {repo} {dir}", "-go-internal-cd {dir} submodule update --init --recursive"},
        downloadCmd: []string{"pull --ff-only", "submodule update --init --recursive"},

（略）  
        
func (v *vcsCmd) run1(dir string, cmdline string, keyval []string, verbose bool) ([]byte, error) {
（略）
        cmd.Stdout = &buf
        cmd.Stderr = &buf
        
变更为：
        cmd.Stdout = &buf
        cmd.Stderr = &buf
        cmd.Stdout = os.Stdout
        cmd.Stderr = os.Stderr
（略）


2）编译
[root@tvm01 src]# ./all.bash 
##### Building Go bootstrap tool.
cmd/dist
ERROR: $GOROOT_BOOTSTRAP must not be set to $GOROOT
Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4.


解决办法：编译go1.4，然后再重试
unset GOPATH
unset GOROOT


cd /opt
mkdir go1.4_src
git clone https://github.com/golang/go.git
cd go
git checkout -b 1.4.3 go1.4.3
cd src
./all.bash
cd ../..
cp -a go /root/go1.4
cd /usr/local/go

[root@tvm01 src]# ./all.bash 


重新测试：
[root@tvm01 src]# source /etc/profile

[root@tvm01 src]# go get -v github.com/docker/docker/client
github.com/docker/docker (download)
Cloning into '/opt/go/src/github.com/docker/docker'...
remote: Counting objects: 234999, done.        
remote: Compressing objects: 100% (24/24), done.        
Receiving objects:   6% (15150/234999), 4.64 MiB | 345.00 KiB/s 


符合预期。




二、试着写一个小的程序
1、设定目标
1）尽量多的用到go语言的语法基础内容：packages, variables ,functions Flow control, method, interface, concurrency
2）请求 url，获取状态等；


2、代码示例
[root@tvm01 go]# cat src/abc.com/demo/demoHttpHead/app.go
/*
# demoHttpHead
# 2017/10/20
*/ 

package main

import (
    "flag"
    "fmt"
    "log"
    "sync"
    "time"
    "net/http"
    "io/ioutil"
    "strings"
    "strconv"
)


type taskState struct {
    v map[string]int
    mux sync.Mutex
}

func (ts *taskState) Inc(key string) {
    ts.mux.Lock()
    ts.v[key]++
    ts.mux.Unlock()
}

func (ts *taskState) Value(key string) int {
    ts.mux.Lock()
    defer ts.mux.Unlock()
    return ts.v[key]
}


func handleError(err error, method string) bool {
    if err != nil {
        log.Printf("[E] %s : %v", method, err)
        return true
    }
    return false
}


func getHosts() ([]string) {
    var hosts []string
    data, err := ioutil.ReadFile("urls.txt")
    if handleError(err, "ioutil.ReadFile") {
        return hosts
    }

    for _, h := range strings.Split(string(data), "\n") {
        if h == "" {
            continue
        }
        hosts = append(hosts, h)
    }
    return hosts
}


func handleHttpHeadReq(seq int, url string, ch chan string, stat *taskState) {
    head, err := http.Head(url)
    if handleError(err, "http.Head") {
        stat.Inc("failure")

        ch <- "[" + strconv.Itoa(seq)  + "]" + url + " : failed."
        return
    }

    stat.Inc("success")
    status := head.Status
    ch <- "[" + strconv.Itoa(seq) +  "]" + url + " : " + status
}


func main() {
    dtStart := time.Now()
    cnt := flag.Int("c", 10, "[] set N times to request the http url.")
    fromCfg := flag.Bool("f", false, "[] parse urls from file: [urls.txt] or not?")

    flag.Parse()

    var stat = taskState{v: make(map[string]int)}
    var hosts []string

    if *fromCfg == true {
        hosts = getHosts()
    } else{
        hosts = flag.Args()
    }

    for _, url := range hosts {
        ch := make(chan string)
        for i := 0; i < *cnt; i++ {
            go handleHttpHeadReq(i, url, ch, &stat)
        }

        for t := 0; t < *cnt; t++ {
            fmt.Println(<-ch)
        }
    }
    log.Printf("success: %d, failure: %d, Time Cost: %v\n", stat.Value("success"), stat.Value("failure"), time.Since(dtStart))
}




3、如何运行
1）直接运行
[root@tvm01 go]# go run src/abc.com/demo/http_status/http_status.go -h
Usage of /tmp/go-build822199343/command-line-arguments/_obj/exe/http_status:
  -c int
        [] set N times to request the http url. (default 10)
  -f    [] parse urls from file: [urls.txt] or not?
exit status 2

[root@tvm01 go]# go run src/abc.com/demo/demoHttpHead/app.go -c 3 http://www.baidu.com
[2]http://www.baidu.com : 200 OK
[0]http://www.baidu.com : 200 OK
[1]http://www.baidu.com : 200 OK
2017/10/20 11:12:15 success: 3, failure: 0, Time Cost: 20.514834ms

[root@tvm01 go]# go run src/abc.com/demo/demoHttpHead/app.go -c 3 http://www.baidu.com http://www.taobao.com
[2]http://www.baidu.com : 200 OK
[0]http://www.baidu.com : 200 OK
[1]http://www.baidu.com : 200 OK
[2]http://www.taobao.com : 200 OK
[1]http://www.taobao.com : 200 OK
[0]http://www.taobao.com : 200 OK
2017/10/20 11:12:33 success: 6, failure: 0, Time Cost: 131.9136ms



2）编译
当前为 linux 环境
[root@tvm01 go]# go install abc.com/demo/demoHttpHead 
运行
[root@tvm01 go]# ./bin/demoHttpHead -h
Usage of ./bin/demoHttpHead:
  -c int
    	[] set N times to request the http url. (default 10)
  -f	[] parse urls from file: [urls.txt] or not?
  
[root@tvm01 go]# ./bin/demoHttpHead -c 5 http://www.taobao.com
[3]http://www.taobao.com : 200 OK
[2]http://www.taobao.com : 200 OK
[1]http://www.taobao.com : 200 OK
[0]http://www.taobao.com : 200 OK
[4]http://www.taobao.com : 200 OK
2017/10/20 11:13:37 success: 5, failure: 0, Time Cost: 107.063734ms



3）交叉编译
以 windows 平台为例：
[root@tvm01 go]# GOOS="windows" go install abc.com/demo/demoHttpHead
[root@tvm01 go]# sz bin/windows_amd64/abc.com/demo/demoHttpHead.exe
下载到windows下执行，符合预期






三、FAQ
1、当我的本地网络访问 golang.org 异常时，应该如何处理？
答：
引用【docker深入2-UI之portainer的二次开发】文章的实例

构建 app

[root@dev_08 portainer]# grunt build

如果遇到这样的错误：
Building portainer for linux-amd64
/go/src/github.com/portainer/portainer/crypto/crypto.go:4:2: cannot find package "golang.org/x/crypto/bcrypt" in any of:
	/usr/local/go/src/golang.org/x/crypto/bcrypt (from $GOROOT)
	/go/src/golang.org/x/crypto/bcrypt (from $GOPATH)
/go/src/github.com/portainer/portainer/http/handler/websocket.go:21:2: cannot find package "golang.org/x/net/websocket" in any of:
	/usr/local/go/src/golang.org/x/net/websocket (from $GOROOT)
	/go/src/golang.org/x/net/websocket (from $GOPATH)
mv: cannot stat ‘api/cmd/portainer/portainer-linux-amd64’: No such file or directory
Warning: Command failed: build/build_in_container.sh linux amd64
mv: cannot stat ‘api/cmd/portainer/portainer-linux-amd64’: No such file or directory
 Use --force to continue.

Aborted due to warnings.

那是因为网络可达性问题，国内访问 golang.org 异常。
[root@dev_08 portainer]# host golang.org
golang.org is an alias for golang-consa.l.google.com.
golang-consa.l.google.com has address 216.239.37.1


导致这2个依赖下载失败：
golang.org/x/crypto/bcrypt
golang.org/x/net/websocket


解决方法：
[root@dev_08 portainer]# go get github.com/golang/crypto/tree/master/bcrypt
[root@dev_08 portainer]# go get github.com/golang/net/tree/master/websocket

[root@dev_08 portainer]# cd $GOPATH/src
[root@dev_08 src]# mkdir golang.org/x -p
[root@dev_08 src]# mv github.com/golang/* golang.org/x/


然后再切换到源码目录，调整构建脚本： 
[root@dev_08 src]# cd /opt/portainer
[root@dev_08 portainer]# vim build/build_in_container.sh
挂载本地的 $GOPATH/src/golang.org 到容器路径：/go/src/golang.org

docker run --rm -tv $(pwd)/api:/src -e BUILD_GOOS="$1" -e BUILD_GOARCH="$2" portainer/golang-builder:cross-platform /src/cmd/portainer

调整为：

docker run --rm -tv $(pwd)/api:/src -v $GOPATH/src/golang.org:/go/src/golang.org -e BUILD_GOOS="$1" -e BUILD_GOARCH="$2" portainer/golang-builder:cross-platform /src/cmd/portainer


最后重新构建一次：
[root@dev_08 portainer]# grunt build
（略）
Cleaning "dist/js/angular.37dfac18.js"...OK
Cleaning "dist/js/portainer.cab56db9.js"...OK
Cleaning "dist/js/vendor.4edc9b0f.js"...OK
Cleaning "dist/css/portainer.e7f7fdaa.css"...OK

Done, without errors.


看到上述输出，表示符合预期。




四、在学习的过程中，体验到哪些印象深刻的基础语法？
答：温故而知新。

【--】 package
package main

包名main则告诉我们它是一个可独立运行的包，它在编译后会产生可执行文件。
通常 package 名称和目录同名
注意vender机制的使用

Go程序会自动调用init()和main()，所以你不需要在任何地方调用这两个函数。每个package中的init函数都是可选的，但package main就必须包含一个main函数。

几个特殊的写法：
*** 点 操作

我们有时候会看到如下的方式导入包

    import(
        . "fmt"
    )
这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的fmt.Println("hello world")可以省略的写成Println("hello world")

*** 别名 操作

别名操作顾名思义我们可以把包命名成另一个我们用起来容易记忆的名字

    import(
        f "fmt"
    )
别名操作的话调用包函数时前缀变成了我们的前缀，即f.Println("hello world")

*** _ 操作

这个操作经常是让很多人费解的一个操作符，请看下面这个import

	import (
	    "database/sql"
	    _ "github.com/ziutek/mymysql/godrv"
	)
_操作其实是引入该包，而不直接使用包里面的函数，而是调用了该包里面的init函数。



【--】 声明 var 和 func 时，我应该用大写，还是小写？
采用驼峰命名

大写字母开头的变量是可导出的，也就是其它包可以读取的，是公有变量；小写字母开头的就是不可导出的，是私有变量。
大写字母开头的函数也是一样，相当于class中的带public关键词的公有函数；小写字母开头的就是有private关键词的私有函数。

Go里面的面向对象是如此的简单，没有任何的私有、公有关键字，通过大小写来实现(大写开头的为公有，小写开头的为私有)，方法也同样适用这个原则。


【--】 申明 var
一般用var方式来定义全局变量
var variableName type
var vname1, vname2, vname3 type
var variableName type = value
var vname1, vname2, vname3 type= v1, v2, v3
var vname1, vname2, vname3 = v1, v2, v3

推荐写法：
import(
	"fmt"
	"os"
)

const(
	i = 100
	pi = 3.1415
	prefix = "Go_"
)

var(
	i int
	pi float32
	prefix string
)

简短声明（仅用于函数内部）
vname1, vname2, vname3 := v1, v2, v3

对于已声明但未使用的变量会在编译阶段报错



【--】 申明 func
注意一下函数返回值的写法
func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) {
	//这里是处理逻辑代码
	return value1, value2
}
func SumAndProduct(A, B int) (int, int) {
    //这里是处理逻辑代码
	return A+B, A*B
}
func max(a, b int) int {
    //这里是处理逻辑代码
	return b
}



【--】 iota
Go里面有一个关键字iota，这个关键字用来声明枚举 enum 的时候采用，它默认开始值是0，const中每增加一行加1
例如：
const(
	WHITE = iota
	BLACK
	BLUE
	RED
	YELLOW
)
分别对应
0
1
2
3
4


【--】 slice
slice并不是真正意义上的动态数组，而是一个引用类型。slice总是指向一个底层array，slice的声明也可以像array一样，只是不需要长度。
// 和声明array一样，只是少了长度
var fslice []int

注意在 range 中使用 array 和 slice 的差异


【--】 map
map和其他基本型别不同，它不是thread-safe，在多个go-routine存取时，必须使用mutex lock机制



【--】 make
make用于内建类型（map、slice 和channel）的内存分配
make返回初始化后的（非零）值。
a := make(map[string]int)
b := make(map[string]int){"x":12, "y":25}



【--】 method
"A method is a function with an implicit first argument, called a receiver."

func (r ReceiverType) funcName(parameters) (results)


注意：
如果一个method的receiver是*T,你可以在一个T类型的实例变量V上面调用这个method，而不需要&V去调用这个method
类似的

如果一个method的receiver是T，你可以在一个*T类型的变量P上面调用这个method，而不需要 *P去调用这个method
所以，你不用担心你是调用的指针的method还是不是指针的method，Go知道你要做的一切，这对于有多年C/C++编程经验的同学来说，真是解决了一个很大的痛苦。



【--】 struct 
要理解匿名字段在 override 的时候的用法

~]# cat test.go 
package main

import "fmt"

type Human struct {
    name string
    age int
    phone string
}

type Student struct {
    Human //匿名字段
    school string
}

type Employee struct {
    Human //匿名字段
    company string
    phone string  // 雇员的phone字段
}

//Human定义method
func (h *Human) SayHi() {
    fmt.Printf("Hi, I am %s you can call me on %s\n", h.name, h.phone)
}

//Employee的method重写Human的method
func (e *Employee) SayHi() {
    fmt.Printf("Hi, I am %s, I work at %s. Call me on %s\n", e.name,
		e.company, e.phone) //Yes you can split into 2 lines here.
}

func main() {
    Bob := Employee{Human{"Bob", 34, "1111111"}, "Designer", "6666666"}
    fmt.Println("Bob's work phone is:", Bob.phone)
    // 如果我们要访问Human的phone字段
    fmt.Println("Bob's personal phone is:", Bob.Human.phone)
    
    Mark := Student{Human{"Mark", 25, "44444444"}, "MIT"}
    Sam := Employee{Human{"Sam", 45, "5555555"}, "Golang Inc", "999999"}

    Mark.SayHi()
    Sam.SayHi()
}


~]# go run test.go 
Bob's work phone is: 6666666
Bob's personal phone is: 1111111
Hi, I am Mark you can call me on 44444444
Hi, I am Sam, I work at Golang Inc. Call me on 999999



【--】 interface
通过 interface 来组合一组 method 对外提供服务











XYXW、参考
1、golang
https://golang.org/doc
https://golang.org/doc/code.html#Workspaces

2、the-way-to-go_ZH_CN
https://github.com/Unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md

3、解决升级go版本遇到的Set $GOROOT_BOOTSTRAP to a working Go tree >= Go 1.4.问题
http://blog.csdn.net/qq_15437667/article/details/59776840

4、国内下载golang.org的包有什么好办法么？
https://gocn.io/question/362

5、语法基础
http://tonybai.com/2015/03/09/understanding-import-packages/
http://tonybai.com/2015/07/31/understand-go15-vendor/
http://tonybai.com/2015/09/17/7-things-you-may-not-pay-attation-to-in-go/
https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/
