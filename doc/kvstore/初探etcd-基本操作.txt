初探etcd-基本操作
2017/11/9

一、初识
1、用途
etcd是用于共享配置和服务发现的分布式、一致性的KV存储系统。本文重点是记录最新版本（目前是v3）的 etcd 服务的基本操作，因而将不定时更新本文。

目前的主要版本：
v2：restapi，基于目录
v3：grpc，使用protobuf，兼容了v2的接口，但不能混用（例如，使用v2的接口来获取v3版本保存的数据），使用v3的接口，需申明 ETCDCTL_API=3 

2、目标
本次示例 v3 版本的基本操作，作为初步了解

3、下载
来自：https://github.com/coreos/etcd/releases
wget https://github.com/coreos/etcd/releases/download/v3.2.9/etcd-v3.2.9-linux-amd64.tar.gz
tar zxvf etcd-v3.2.9-linux-amd64.tar.gz
cp etcd-v3.2.9-linux-amd64/etcd* /usr/local/bin/



二、单节点环境
1、启动服务
nohup etcd --name etcd_test --data-dir /tmp/etcd_test >>/var/log/etcd_test.log 2>&1 &


2、put
ETCDCTL_API=3 /usr/local/bin/etcdctl put foo bar
ETCDCTL_API=3 /usr/local/bin/etcdctl put testjson {"PublishedPort":"11111","Labels":[{"com.test.env":"dev"}]}


ETCDCTL_API=3 /usr/local/bin/etcdctl put "/docker/node/n01" "192.168.100.111"
ETCDCTL_API=3 /usr/local/bin/etcdctl put "/docker/node/n02" "192.168.100.112"
ETCDCTL_API=3 /usr/local/bin/etcdctl put "/docker/node/n03" "192.168.100.113"
ETCDCTL_API=3 /usr/local/bin/etcdctl put "/docker/service/s01" "1005"
ETCDCTL_API=3 /usr/local/bin/etcdctl put "/docker/service/s02" "1007"



3、get
精确匹配
~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get foo
foo
bar


改变输出格式为 json
~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get -w json foo
{"header":{"cluster_id":14841639068965178418,"member_id":10276657743932975437,"revision":13,"raft_term":2},"kvs":[{"key":"Zm9v","create_revision":12,"mod_revision":12,"version":1,"value":"YmFy"}],"count":1}


注意，在 v3 的版本中 key 和 value 是经过 base64 编码的
~]# echo -n 'foo' |base64
Zm9v
~]# echo -n 'bar' |base64
YmFy



前缀匹配
~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get --prefix /docker
/docker/node/n01
192.168.100.111
/docker/node/n02
192.168.100.112
/docker/node/n03
192.168.100.113
/docker/service/s01
1005
/docker/service/s02
1007

~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get --prefix /docker/node
/docker/node/n01
192.168.100.111
/docker/node/n02
192.168.100.112
/docker/node/n03
192.168.100.113

~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get --prefix /docker/service
/docker/service/s01
1005
/docker/service/s02
1007


获取所有的key
~]# ETCDCTL_API=3 /usr/local/bin/etcdctl get --prefix ""
/docker/node/n01
192.168.100.111
/docker/node/n02
192.168.100.112
/docker/node/n03
192.168.100.113
/docker/service/s01
1005
/docker/service/s02
1007
foo
bar
testjson
PublishedPort:11111



4、使用 confd 来生产数据
1）安装 confd
git clone https://github.com/kelseyhightower/confd.git $GOPATH/src/github.com/kelseyhightower/confd
cd $GOPATH/src/github.com/kelseyhightower/confd
make
cp bin/confd /usr/local/bin/
mkdir -p /etc/confd/{conf.d,templates}


2）配置文件
~]# tree /etc/confd
/etc/confd
├── conf.d
│   └── nginx.toml
└── templates
    └── nginx.tmpl

2 directories, 2 files
~]# cat /etc/confd/conf.d/nginx.toml 
[template]
prefix = "/docker"
src = "nginx.tmpl"
dest = "/tmp/myapp.conf"
owner = "nginx"
mode = "0644"
keys = [
  "/node",
  "/service",
]


~]# cat /etc/confd/templates/nginx.tmpl 
{{range gets "/service/*"}}
upstream backend_{{base .Key}} { {{$port := .Value}} {{range getvs "/node/*"}}
    server {{.}}:{{$port}}{{end}}
}

server {
    server_name {{base .Key}}.example.com;
    location / {
        proxy_pass http://backend_{{base .Key}};
        proxy_redirect    off;
        proxy_set_header  Host             $host;
        proxy_set_header  X-Real-IP        $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
}
{{end}}



3）测试
~]# confd -onetime -backend etcdv3 -node http://127.0.0.1:2379 >/dev/null 2>&1 && cat /tmp/myapp.conf

upstream backend_s01 {  
    server 192.168.100.111:1005
    server 192.168.100.112:1005
    server 192.168.100.113:1005
}

server {
    server_name s01.example.com;
    location / {
        proxy_pass http://backend_s01;
        proxy_redirect    off;
        proxy_set_header  Host             $host;
        proxy_set_header  X-Real-IP        $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
}

upstream backend_s02 {  
    server 192.168.100.111:1007
    server 192.168.100.112:1007
    server 192.168.100.113:1007
}

server {
    server_name s02.example.com;
    location / {
        proxy_pass http://backend_s02;
        proxy_redirect    off;
        proxy_set_header  Host             $host;
        proxy_set_header  X-Real-IP        $remote_addr;
        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
    }
}




三、集群环境
注：本文可能已经过时（2017年初），写下来的目的仅供参考常用操作，不明之处请参考官网文档。
1、环境
NAME	ADDRESS	        HOSTNAME
infra0	172.20.101.218	infra0.example.com
infra1	172.20.101.219	infra1.example.com
infra2	172.20.101.220	infra2.example.com

2、初始化建立一个集群
可以指定环境变量：
ETCD_INITIAL_CLUSTER="infra0=http://172.20.101.218:2380,infra1=http://172.20.101.219:2380,infra2=http://172.20.101.220:2380"
ETCD_INITIAL_CLUSTER_STATE=new

也可以在命令行指定参数：
--initial-cluster infra0=http://172.20.101.218:2380,infra1=http://172.20.101.219:2380,infra2=http://172.20.101.220:2380 \
--initial-cluster-state new

一个典型的集群创建方法：
[root@n218 ~] nohup etcd --name infra0 --data-dir /data/etcd --initial-advertise-peer-urls http://172.20.101.218:2380 \
--listen-peer-urls http://172.20.101.218:2380 \
--listen-client-urls http://172.20.101.218:2379,http://127.0.0.1:2379 \
--advertise-client-urls http://172.20.101.218:2379 \
--initial-cluster-token etcd-cluster-1 \
--initial-cluster infra0=http://172.20.101.218:2380,infra1=http://172.20.101.219:2380,infra2=http://172.20.101.220:2380 \
--initial-cluster-state new >>/var/log/etcd.log 2>&1 &
  
[root@n219 ~] nohup etcd --name infra1 --data-dir /data/etcd --initial-advertise-peer-urls http://172.20.101.219:2380 \
--listen-peer-urls http://172.20.101.219:2380 \
--listen-client-urls http://172.20.101.219:2379,http://127.0.0.1:2379 \
--advertise-client-urls http://172.20.101.219:2379 \
--initial-cluster-token etcd-cluster-1 \
--initial-cluster infra0=http://172.20.101.218:2380,infra1=http://172.20.101.219:2380,infra2=http://172.20.101.220:2380 \
--initial-cluster-state new >>/var/log/etcd.log 2>&1 &
  
[root@n220 ~] nohup etcd --name infra2 --data-dir /data/etcd --initial-advertise-peer-urls http://172.20.101.220:2380 \
--listen-peer-urls http://172.20.101.220:2380 \
--listen-client-urls http://172.20.101.220:2379,http://127.0.0.1:2379 \
--advertise-client-urls http://172.20.101.220:2379 \
--initial-cluster-token etcd-cluster-1 \
--initial-cluster infra0=http://172.20.101.218:2380,infra1=http://172.20.101.219:2380,infra2=http://172.20.101.220:2380 \
--initial-cluster-state new >>/var/log/etcd.log 2>&1 &


3、初体验
1）准备工作
export ETCDCTL_API=3
ETCD_HOST_1=172.20.101.218
ETCD_HOST_2=172.20.101.219
ETCD_HOST_3=172.20.101.220
ENDPOINTS=$ETCD_HOST_1:2379,$ETCD_HOST_2:2379,$ETCD_HOST_3:2379

[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS member list
2d1d13afa9247812, started, infra0, http://172.20.101.218:2380, http://172.20.101.218:2379
569c995bba1e3402, started, infra1, http://172.20.101.219:2380, http://172.20.101.219:2379
876a9bb6cf01a32f, started, infra2, http://172.20.101.220:2380, http://172.20.101.220:2379

2）put
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS put foo "Hello World" 
OK

3）get
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS get foo
foo
Hello World
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS --write-out="json" get foo
{"header":{"cluster_id":9675665160038703428,"member_id":6241031802872280066,"revision":2,"raft_term":19},"kvs":[{"key":"Zm9v","create_revision":2,"mod_revision":2,"version":1,"value":"SGVsbG8gV29ybGQ="}],"count":1}

4）delete
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS put key myvalue
OK
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS del key
1

5）prefix
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS put web1 value1
OK
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS put web2 value2
OK
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS put web3 value3
OK
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS get web --prefix
web1
value1
web2
value2
web3
value3
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS del web --prefix
3

6）watch
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS watch stock1

在另一个窗口 put 数据，观察变化：
[root@n220 ~]# etcdctl --endpoints=$ENDPOINTS put stock1 1000
OK
[root@n220 ~]# etcdctl --endpoints=$ENDPOINTS put stock1 2000
OK

发现变化：
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS watch stock1
PUT
stock1
1000
PUT
stock1
2000
^C

7）Distributed locks
在会话1中获得锁：
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS lock mutex1
mutex1/232f591b6f81c904
（上述表示已经获得）

在会话2中试图获得同一个锁：
[root@n220 ~]# etcdctl --endpoints=$ENDPOINTS lock mutex1
（无响应）

在会话1中释放lock：
[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS lock mutex1
mutex1/232f591b6f81c904

^C
（上述表示已经释放）

在会话2中查看状态：
[root@n220 ~]# etcdctl --endpoints=$ENDPOINTS lock mutex1
mutex1/232f591b6f81c909
（上述表示已经获得，符合预期）
^C


8）Cluster status
[root@n218 ~]# etcdctl --write-out=table --endpoints=$ENDPOINTS endpoint status
+---------------------+------------------+---------+---------+-----------+-----------+------------+
|      ENDPOINT       |        ID        | VERSION | DB SIZE | IS LEADER | RAFT TERM | RAFT INDEX |
+---------------------+------------------+---------+---------+-----------+-----------+------------+
| 172.20.101.218:2379 | 2d1d13afa9247812 | 3.0.15  | 33 kB   | true      |        19 |       3401 |
| 172.20.101.219:2379 | 569c995bba1e3402 | 3.0.15  | 33 kB   | false     |        19 |       3401 |
| 172.20.101.220:2379 | 876a9bb6cf01a32f | 3.0.15  | 33 kB   | false     |        19 |       3401 |
+---------------------+------------------+---------+---------+-----------+-----------+------------+

[root@n218 ~]# etcdctl --endpoints=$ENDPOINTS endpoint health
172.20.101.218:2379 is healthy: successfully committed proposal: took = 3.177292ms
172.20.101.219:2379 is healthy: successfully committed proposal: took = 4.214202ms
172.20.101.220:2379 is healthy: successfully committed proposal: took = 4.678532ms

其他指令请参考原文。


4、api
请参考官网doc


ZYXW、参考
1、官网doc
clustering: https://github.com/coreos/etcd/blob/master/Documentation/op-guide/clustering.md
demo: https://github.com/coreos/etcd/blob/master/Documentation/demo.md
interacting: https://github.com/coreos/etcd/blob/master/Documentation/dev-guide/interacting_v3.md
api: https://coreos.com/etcd/docs/latest/v2/api.html

2、ETCD系列之一：简介
https://yq.aliyun.com/articles/11035






