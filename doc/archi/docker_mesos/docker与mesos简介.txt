docker与mesos简介
数人云CTO 肖德时
曾为红帽 Engineering Service 部门内部工具组 Team Leader。现负责数人云云计算的研发及架构设计工作，深入研究 Docker，Mesos 集群， 云计算等领域。

Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核。Mesos最初是由加州大学伯克利分校的AMPLab开发的，后在Twitter、Netflix、AirBnb、Autodesk、Apple 等得到广泛使用，国内有爱奇艺、360、小米、去哪儿等公司也在使用 Mesos 技术。

Mesos实现了两级调度架构，它可以管理多种类型的应用程序。第一级调度是Master的守护进程，管理Mesos集群中所有节点上运行的Slave守护进程。集群由物理服务器或虚拟服务器组成，用于运行应用程序的任务，比如Java、Mysql Cluster、Hadoop 等。

第二级调度由被称作Framework的“组件”组成。Framework包括调度器（Scheduler）和执行器（Executor）进程，其中每个节点上都会运行执行器。Mesos能和不同类型的Framework通信，每种Framework由相应的应用集群管理。

Mesos Master协调全部的Slave，并确定每个节点的可用资源，聚合计算跨节点的所有可用资源的报告，然后向注册到Master的Framework（作为Master的客户端）发出资源邀约。

Framework可以根据应用程序的需求，选择接受或拒绝来自master的资源邀约。一旦接受邀约，Master即协调Framework和Slave，调度参与节点上任务，并在容器中执行，以使多种类型的任务，比如Hadoop和Cassandra，可以在同一个节点上同时运行。



第三部分想分享下，Mesos与K8s等技术的对比

假如你刚入门集群计算，那么Kubernetes将会是很好的出发点；它快捷，易用，轻量的方式来处理集群导向开发的集成和体验。它提供了非常高瞻远瞩式的可移植性，让它得以支持多家提供商（微软，IBM，红帽，CoreOS，Mesosphere, Kismatic, VMware等等)

Kubernetes是一个开源项目，由Google Cloud Platform组开发，给全球的虚拟机带来了容器集群管理的能力，当然还包括裸机硬件。它能和当代的操作系统很好的一起工作，例如：Ubuntu, RedHat, Project Atomic/CentOS, 或者CoreOS。这些系统提供了轻量的计算节点来受你托管。

Kubernetes是用Golang语言写的，它轻量、模块化、可移植还有扩展性。Google的Kubernetes开发组正在和数个不同背景的技术公司一起制定基于Kubernetes作为标准的计算集群的标准方案。这个想法就是借鉴Google在构建分布式应用上积累的经验来帮助需要构建分布式应用的开发者。

这些核心的理念包括以下一些基本概念：

Pods --- 是连接在一起的容器组合并共享文件卷。它们是最小的部署单元，由Kubernetes统一创建、调度、管理。Pods是可以直接创建的，但推荐的做法是你使用replication controller，即使是创建一个Pod。

Replication controllers --- 管理Pods的生命周期。它们确保指定数量的Pods会一直运行，通过创建和杀掉Pods可以保证到这个效果。

Labels --- 它被用来管理和选取基于键值对为基础的对象组。

Services --- 提供独立、可靠名称和地址的Pods集合。它就像一个基础版本的负载均衡器。

所以，伴随着Kubernetes，你将获得一些简单、易用的获得即起即用性，可一致性和扩展性。当加入“分布式”这个术语到你管理的事情上，这个事情将是一个真正轻量的方式。

在一个集群里运行应用程序，不再担心单独的主机。在这个例子中，一个集群是一个灵活的资源就像一个虚拟机。它是一个逻辑计算单元，你可以启动它，使用它，调整集群大小，关闭它，既快速也容易。

对于Mesos，这里有很多基本观点的重叠定义，但是产品确实有一些不同的点。Mesos是一个分布式系统内核，编织不同类型的主机放在一起当一台逻辑计算电脑。它的出现是基于你拥有大量的物理机资源让你能够使用，来创建大型的静态计算集群。

很重要的事情是它能让很多现代可扩展的计算处理应用能运行的很好在Mesos集群之上（Hadoop, Kafka和Spark)。它非常棒的地方在于可以在同样的基础资源环境里同时可以运行这些计算处理应用，包括同时运行微服务时代的容器类型的应用。有些地方它确实比Kubernetes重，但是它越来越易用，这要归功于Mesosphere公司的团队贡献。

现在让这个事情更有趣的是Mesos已经开始采用并加入更多Kubernetes的概念来支持Kubernetes API。假如你需要Mesos的特性，这样会是一个网桥连接Mesos，以让你的Kubernetes程序能到更多兼容性的特性（比如：高可靠Master，更多调度的概念，以及管理大量节点的能力）。并且它已经很好的适配到生产环境中（Kubernetes仍然是一个预览版测试阶段，V1的调度将在1到2个月被发布出来）。

假如你已经有了特殊的环境（Spark, Hadoop, Kafka等等），Mesos将给你一个框架，让你插入这些系统到你的集群里，并且可以混合运行一些Kubernetes程序。Mesos给你提供了一个安全阀，在你需要这些计算能力但社区还没有提供实现的情况下可以实现支持。

假如你来自虚拟机的世界，或者传统的服务器架构，Kubernetes将是很好的选则。Mesos需要一个自定义的"Framework"来支持例如运行 MariaDB，但是Kubernetes的容器化应用却可以直接运行，并不需要任何修改。这是一个进入可扩展容器集群的最佳办法。



第四部分，深入介绍 Mesos 生态，问题和发展方向

2015年我去西雅图参加 Mesos Conf 时，会议规模在600多人左右，所以Mesos应该是在2015年开始发展迅猛起来的。现在Mesos社区贡献代码的主要是Mesosphere，Twitter，IBM和Intel 等，大多数committer都来自Mesosphere。

但是，这个社区的组织非常稳定，Mesosphere 并不会强制增加新 Feature，大家都是在一起讨论过程中去实现 Roadmap 中的新特性。让我在参与过程中，可以很方便的和世界各地的开发者一起交流自己的观点。大家交流的方式是按照 Apache 项目传统的方式-邮件列表来组织的，只要按照 Apache 的开发模式，你可以很容易的融入到社区里面。只是需要很长时间，你才能真正成为 Committer。这个也是 Apache 项目的一个特点。

Mesos的生态系统我也是在2015年才开始真正关注，我首先关注到Spark 的原生支持非常好，接着看到 Mesos 对大数据的整个生态圈是全面支持的。这个是 Mesos 社区的一个天然优势。然后对于各类应用，业界也贡献了很多好用的框架，比如 Marathon、Chronos、Spark、Kubernetes、Cassandra、Elasticsearch、Swarm 等等。所以，这个让我有了很大的想象空间。这些Frameworks，我可以任意的组合和调配，完全满足我对新功能的探索和定制工作。

目前我比较关注的点和当前 Docker 有关系：Unified Container Mesos-2840，Mesos 之前是直接通过命令行来调用 Docker的。从之前的用户反馈也大量反应出用户对 Docker 使用兼容性的苦恼。



最后，我简要介绍行业使用场景，包括秒杀等互联网高并发、生物、教育等

对于行业使用场景，主要是需要参考业界的使用案例。比如浙江移动的 DCOS 在秒杀业务中的使用。去哪儿的 Mesos 日志处理模块的处理。我们可以参考的案例非常多，足以支持我们对 Mesos 在高并发、生物、教育等等行业找到最佳实践。

对于秒杀业务，大家都会把关注点集中在性能上。但是如果没有一个分布式的架构，怎么可能发挥应用的完整性能呢？这个时候 Mesos 这个框架就是一个很好的参考。它提供了一个分布式的 Core 框架模型。秒杀的场景下，让应用做成无状态的水平扩展来支撑流量成为可能。

分布式框架下，程序的组织方式也会被迫使做一些改变，慢慢往微服务架构方向转变。所以，秒杀业务本身可以有很多种解决方法，但是你可以选择Mesos 来构建这个池化的环境，让业务流量被支撑。

当然微服务的改造如果没有 Docker 这个标准的隔离组件，业务上是需要做很多工作才能支持微服务环境的。用了 Docker 之后，同一台机器是可以安装多份实例的，这个好处就是应用本身是一个单体模型的程序，通过 Docker 来动态的创建多实例。多个实例设计成无状态，并且交互也通过 REST API 来限制接口，这个时候，这个微服务模型就出来了。

生物算是一个典型的分布式计算的业务场景，生物云计算最大的需求是算法的计算，但是这个计算需要耗费的资源是非常高的。如何把原有的老算法程序跑在分布式环境下是一个难题。为了匹配这个业务场景，发现 Mesos 是一个可靠的集群方案。

注意，生物公司的算法程序已经有了，涉及算法的复杂性，迁移过程是需要时间的，但生物的业务不能等这个迁移过程，这个需要有一个隔离环境来解决。这个时候，Docker 的优势就发挥出来了。Docker 是能隔离的，所以，对于老程序，你用 Docker 是可以容器化的，并且直接就可以把老程序丢到机器上跑。天然的隔离性让一台机器可以跑多个算法实例，实现资源的高利用率。

除此之外，生物公司还可以继续用 Spark 等大数据技术实现老算法的迁移，在不影响业务的情况下，还能自主创新。一套集群既可以跑老业务算法，又可以跑新业务算法，做到业务不中断情况下更新技术栈的效果。

对于教育行业，Mesos+Docker 的用处主要是提供一个固定的资源池。然后通过 Docker 的隔离封装，给学员提供可以重复练习的实验 Lab环境。对于环境，其实 Docker 起到的作用是至关重要的。如果学员需要 Linux 主机，通过启动一个 Docker 容器就可以提供 Linux 环境。但目前支持的类型比较有限，最好是单容器的环境支持是最好的。














