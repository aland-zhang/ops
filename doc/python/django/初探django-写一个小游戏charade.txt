初探django-写一个小游戏charade
2016/2/17
在根据tutorial学习的同时，尝试写一个猜英文单词的游戏页面（charade）

一、准备环境
1、建立项目
[root@tvm01 ~]# mkdir /opt/charade
[root@tvm01 ~]# cd /opt/charade
[root@tvm01 charade]# django-admin startproject www
[root@tvm01 charade]# cd www/


2、备注
1）此处为简单演示，未使用类似 virtualenv 这类配置，具体方法可以自行测试几次，很简单。
2）使用的系统是 centos6.5x64，并编译安装了python2.7，如果是 centos7， 则默认已经是 python2.7 的版本


二、操作概述
1、项目设置
[root@tvm01 www]# vim www/settings.py 
设定时区，数据库等信息
建立数据库和表：
[root@tvm01 www]# python manage.py migrate

2、配置app
1）创建app
[root@tvm01 www]# django-admin startapp charade

2）设定urls：
[root@tvm01 www]# vim www/urls.py
[root@tvm01 www]# vim charade/urls.py 


3）模型
[root@tvm01 www]# vim charade/models.py

通知django有数据变更
[root@tvm01 www]# python manage.py makemigrations charade
Migrations for 'charade':
  0001_initial.py:
    - Create model GameScoreBoard
    - Create model GameTemporaryTable
    - Create model Vocabulary
    
检查要变更的sql：    
[root@tvm01 www]# python manage.py sqlmigrate charade 0001

执行变更：
[root@tvm01 www]# python manage.py migrate

4）注册模型到后台
[root@tvm01 www]# vim charade/admin.py

5）视图
[root@tvm01 www]# vim charade/views.py 

6）模版
模版和静态文件的目录
[root@tvm01 www]# mkdir charade/templates/charade -p
[root@tvm01 www]# mkdir charade/static/charade/images -p
[root@tvm01 www]# vim charade/templates/charade/index.html
[root@tvm01 www]# vim charade/templates/charade/detail.html




3、运行服务
[root@tvm01 www]# python manage.py runserver 0.0.0.0:80

  
4、创建管理员
[root@tvm01 www]# python manage.py createsuperuser

5、测试
[root@tvm01 www]# python manage.py test charade

6、shell
[root@tvm01 www]# python manage.py shell

7、流程
startproject(www) -> startapp(charade) -> settings/urls(www) -> urls/models(charade) -> views/admin(charade) -> templates/static(charade)



三、技巧
1、在模版的一个循环中，根据行数来使用不同的css class
注意 cycle 的用法
{% for o in some_list %}
    <tr class="{% cycle 'row1' 'row2' %}">
        ...
    </tr>
{% endfor %}


2、调整后台的模版
1）找到django的源码文件路径
[root@tvm01 www]# python -c "
import sys
sys.path = sys.path[1:]
import django
print(django.__path__)"
['/usr/local/lib/python2.7/site-packages/django']

2）创建目录，拷贝并修改模版
[root@tvm01 mysite]# mkdir templates/admin -p
[root@tvm01 mysite]# cp /usr/local/lib/python2.7/site-packages/django/contrib/admin/templates/admin/base_site.html templates/admin/base_site.html

3）配置 www/settings.py
TEMPLATES = [
    {
    （略）
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],
    （略）
    },
]


3、支持中文
调整 model 内容：

# coding: utf-8
from __future__ import unicode_literals
from django.utils.encoding import python_2_unicode_compatible

在 每个 model 的 class 或者 def 前，修饰一下：
@python_2_unicode_compatible
class Question(models.Model):
    question_text = models.CharField('问题', max_length=200)
    pub_date = models.DateTimeField('发布日期')

    
4、使用用户认证系统组件
1）创建一个app
[root@tvm01 www]# django-admin startapp accounts

2）配置 www/settings.py
[root@tvm01 www]# vim www/settings.py
INSTALLED_APPS = [
    （略）
    'accounts',
    （略）
]

3）配置 www/urls.py
[root@tvm01 www]# vim www/urls.py
urlpatterns = [
    （略）
    url(r'^accounts/', include('accounts.urls')),
    （略）
]

4）配置 accounts/urls.py
[root@tvm01 www]# vim accounts/urls.py
from django.conf.urls import url
from django.contrib.auth import views as auth_views

app_name = 'accounts'
urlpatterns = [
    #################################### accounts
    #
    url(r'^login/$', auth_views.login, name='login'),
    url(r'^logout/$', auth_views.logout, {'next_page': '/'}, name='logout'),
]

5）配置模版
本次示例的模版是自己照着django官网auth文档中“All authentication views”这一块提到的模版写的，其实，也可以用django的form来生成模版内容，详情请参考github源码的示例

[root@tvm01 www]# mkdir accounts/templates/accounts -p
[root@tvm01 www]# cat accounts/templates/accounts/login.html    
{% extends "charade/base.html" %}
{% load staticfiles %}
{% block titles %}Login{% endblock %}
{% block js4this %}
    <script src="{% static 'charade/js/charade-login.js' %}"></script>
{% endblock %}
{% block content %}
<div class="row text-center">
    {% if form.errors %}
        <p class="text-danger">Your username and password didn't match. Please try again.</p>
    {% endif %}
    {% if next %}
        {% if user.is_authenticated %}
        <p class="text-warning">Your account doesn't have access to this page. To proceed,
        please login with an account that has access.</p>
        {% else %}
        <p class="text-info">Please login to see this page.</p>
        {% endif %}
    {% endif %}
</div>
<div class="row text-center">
<div class="col-md-4"></div>
<div class="col-md-4">
    <form class="form-horizontal" method="post" action="{% url 'accounts:login' %}">
    {% csrf_token %}
    <div class="form-group">
        <label class="control-label" for="id_username">username :</label>
        {{ form.username }}
    </div>
    <div class="form-group">
        <label class="control-label" for="id_password">password :</label>
        {{ form.password }}
    </div>
    <div class="form-group">
        <input type="submit" class="btn btn-primary" value="login" />
        <input type="hidden" name="next" value="{{ next }}" />
    </div>
    </form>
</div>
<div class="col-md-4"></div>
</div>
{% endblock %}

6）使用修饰符
配置 charade/views.py
from django.contrib.auth.decorators import login_required

@login_required
def game_board(request):

在需要login的view前修饰一下，则render的页面会要求登录。



5、使用cache组件
1）配置 www/settings.py
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

2）配置linux系统安装memcached并启动服务（略）
3）python安装memcache
[root@tvm001 ~]# pip install python-memcached
[root@tvm001 ~]# python -c "import memcache;print memcache.__version__"
1.57
4）使用修饰符
配置 charade/views.py
from django.views.decorators.cache import cache_page

@cache_page(60 * 15)
def show_about(request):

被修饰的view将会被cache，抓包可以发现
Cache-Control:max-age=900


6、语法差异
从1.8到1.9，有几个地方要注意
1）Reversing by dotted path is deprecated
[root@tvm001 www]# python manage.py test
Creating test database for alias 'default'...
...../usr/lib/python2.7/site-packages/django/template/defaulttags.py:499: RemovedInDjango110Warning: Reversing by dotted path is deprecated (django.contrib.auth.views.login).
  url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)

+.. deprecated:: 1.8
+
+    The dotted Python path syntax is deprecated and will be removed in
+    Django 2.0:::
+
+        {% url 'path.to.some_view' v1 v2 %}

全部调整为 name or namespance 的方式即可。


2）Namespacing URL names
1.9的版本是这样的：
【polls/urls.py】
app_name = 'polls'
【mysite/urls.py】
urlpatterns = [
    url(r'^polls/', include('polls.urls')),
    
1.8的版本则是这样的：
【polls/urls.py】
没有定义 app_name
【mysite/urls.py】
url(r'^polls/', include('polls.urls', namespace="polls")),

可以打开2个版本的文档，搜索 namespacing 这一段来对比：
https://docs.djangoproject.com/en/1.9/intro/tutorial03/
https://docs.djangoproject.com/en/1.8/intro/tutorial03/


3）在 startapp 时，将创建一个 app.py，可以为该 app 设置一些全局的变量。
例如：
[root@tvm01 www]# cat accounts/apps.py
from __future__ import unicode_literals

from django.apps import AppConfig


class AccountsConfig(AppConfig):
    name = 'accounts'


7、国际化
1）在代码中
from django.utils.translation import ugettext_lazy as _
help_text=_('Enter the same password as above, for verification.')

2）在模版中
{% load i18n %}
{% block titles %}{% trans 'Registration' %}{% endblock %}

3）本地语言翻译文件
django查找翻译文件的顺序：
在 settings 中定义了 LOCALE_PATHS 优先处理
在 INSTALLED_APPS 中定义的 app 目录下的 locale 目录
在 django/conf/locale 目录

创建翻译文件，以 app 目录下的 locale 目录为例说明：
[root@tvm01 accounts]# mkdir locale
创建或更新消息文件：
[root@tvm01 accounts]# django-admin makemessages -l zh-hans
processing locale zh-hans
[root@tvm01 accounts]# ls locale/zh-hans/LC_MESSAGES/
django.po
更新上面这个文件后，编译：
[root@tvm01 accounts]# django-admin compilemessages

【注：测试后，翻译未生效，待研究】


四、示例
https://github.com/opera443399/charade.git


ZYXW、参考
1、Getting started
https://docs.djangoproject.com/en/1.9/
https://docs.djangoproject.com/en/1.9/intro
https://docs.djangoproject.com/en/1.9/topics/
模型：https://docs.djangoproject.com/en/1.9/intro/tutorial01/
后台：https://docs.djangoproject.com/en/1.9/intro/tutorial02/
视图：https://docs.djangoproject.com/en/1.9/intro/tutorial03/
表单：https://docs.djangoproject.com/en/1.9/intro/tutorial04/
测试：https://docs.djangoproject.com/en/1.9/intro/tutorial05/
静态文件：https://docs.djangoproject.com/en/1.9/intro/tutorial06/
管理后台：https://docs.djangoproject.com/en/1.9/intro/tutorial07/
分页：https://docs.djangoproject.com/en/1.9/topics/pagination/
认证：https://docs.djangoproject.com/en/1.9/topics/auth/default/
模型表单：https://docs.djangoproject.com/en/1.9/topics/forms/modelforms/
模版系统标签：https://docs.djangoproject.com/en/1.9/ref/templates/builtins/#ref-templates-builtins-tags
app：https://docs.djangoproject.com/en/1.9/ref/applications/
i18n: https://docs.djangoproject.com/es/1.9/topics/i18n/translation/#localization-how-to-create-language-files

2、Django 基础教程
http://www.ziqiangxuetang.com/django/django-tutorial.html
