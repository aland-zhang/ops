配置openvpn环境



一、基础环境
1、使用tvm-test
2、网络：
eth0：host-only（用于虚拟内网，手动固定IP，这样从宿主机可以直接连接到这个vm）
eth1：NAT（用于上外网，动态IP）
[root@tvm-test ~]# cd /etc/sysconfig/network-scripts/
[root@tvm-test network-scripts]# cat ifcfg-eth0
DEVICE=eth0
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=none
IPADDR=192.168.56.251
PREFIX=24
GATEWAY=192.168.56.1
DNS1=192.168.56.254

[root@tvm-test network-scripts]# cat ifcfg-eth1
DEVICE=eth1
TYPE=Ethernet
ONBOOT=yes
NM_CONTROLLED=yes
BOOTPROTO=dhcp
DNS1=192.168.56.254


二、配置openvpn服务端
1、安装
[root@tvm-test download]# yum install lzo pkcs11-helper openssl openssl-devel -y
[root@tvm-test download]# wget http://pkgs.repoforge.org/openvpn/openvpn-2.2.2-1.el6.rf.x86_64.rpm
[root@tvm-test download]# rpm -ivh openvpn-2.2.2-1.el6.rf.x86_64.rpm 
warning: openvpn-2.2.2-1.el6.rf.x86_64.rpm: Header V3 DSA/SHA1 Signature, key ID 6b8d79e6: NOKEY
Preparing...                ########################################### [100%]
   1:openvpn                ########################################### [100%]

2、配置证书
[root@tvm-test download]# cd /usr/share/doc/openvpn-2.2.2/easy-rsa/2.0
[root@tvm-test 2.0]# chmod +x *
[root@tvm-test 2.0]# vim vars
这个vars文件定义了一些变量，在后续build证书的环境会用到，这里我们根据自己的情况，自行修改该文件最后几行列出的几个国家、城市，组织等私人信息。


[root@tvm-test 2.0]# source ./vars
NOTE: If you run ./clean-all, I will be doing a rm -rf on /usr/share/doc/openvpn-2.2.2/easy-rsa/2.0/keys
[root@tvm-test 2.0]# ./clean-all
【生成证书】一路回车即可，因为提示的默认值已经在vars中提前定义好。
#生成CA中心
[root@tvm-test 2.0]# ./build-ca
#生成服务器公私钥，注意，有2个地方要输入“y”
[root@tvm-test 2.0]# ./build-key-server server
#生成dh文件
[root@tvm-test 2.0]# ./build-dh
#将证书复制到openvpn配置文件目录 
[root@tvm-test 2.0]# cp -a keys /etc/openvpn/
[root@tvm-test 2.0]# cd /etc/openvpn/
[root@tvm-test openvpn]# 
[root@tvm-test openvpn]# mkdir /etc/openvpn/script
[root@tvm-test openvpn]# ls script/
config.sh  connect.sh  disconnect.sh  login.sh  sendEmail
[root@tvm-test openvpn]# chmod +x script/*
[root@tvm-test openvpn]# vim server.conf 
配置文件和脚本后附。

3、启动服务：
[root@tvm-test openvpn]# service openvpn start
Starting openvpn:                                          [  OK  ]

查看网卡tun0的状态：
[root@tvm-test openvpn]# ip a s dev tun0
4: tun0: <POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UNKNOWN qlen 100
    link/[65534] 
    inet 172.20.1.1 peer 172.20.1.2/32 scope global tun0

4、网络调整
打开转发
[root@tvm-test openvpn]# echo 1 > /proc/sys/net/ipv4/ip_forward 
[root@tvm-test openvpn]# sed -i 's,net.ipv4.ip_forward = 0,net.ipv4.ip_forward = 1,' /etc/sysctl.conf 

调整防火墙
[root@tvm-test openvpn]# cat ~/rc.firewall.txt
*nat
:PREROUTING ACCEPT [1:229]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A POSTROUTING -j MASQUERADE 
COMMIT

*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [83:9092]
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT 
-A INPUT -p icmp -j ACCEPT 
-A INPUT -i lo -j ACCEPT 
-A INPUT -i tun0 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT 
-A INPUT -p tcp -m state --state NEW -m tcp --dport 5016 -j ACCEPT
-A INPUT -j REJECT --reject-with icmp-host-prohibited 
-A FORWARD -i tun0 -j ACCEPT 
-A FORWARD -j REJECT --reject-with icmp-host-prohibited 
COMMIT



[root@tvm-test openvpn]# iptables-restore ~/rc.firewall.txt 
[root@tvm-test openvpn]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]

   

   
三、服务端的配置细节
1、配置文件
配置文件中指定了调用的脚本，这里采用脚本验证用户名和密码的方式来展示。
If method is set to "via-env", OpenVPN will call script with the environmental variables username and password set to the username/password strings provided by the client.

[root@tvm-test ~]# cd /etc/openvpn/
[root@tvm-test openvpn]# cat server.conf 
##protocol port
port 43838   #指定端口
proto tcp   #指定使用tcp协议
dev tun
 
##ip server client
server 172.20.1.0 255.255.255.0  #指定VPN隧道使用的私有IP段
 
##key
ca /etc/openvpn/keys/ca.crt      #指定相关证书路径
cert /etc/openvpn/keys/server.crt
key /etc/openvpn/keys/server.key
dh /etc/openvpn/keys/dh1024.pem
 
##option
persist-key
persist-tun
keepalive 10 120
reneg-sec 432000
ifconfig-pool-persist ipp.txt
 
##option authen.
comp-lzo
user nobody
group nobody
client-to-client
username-as-common-name
client-cert-not-required
auth-user-pass-verify /etc/openvpn/script/login.sh via-env     #指定用户登录时触发脚本（进行用户验证，脚本原理为返回值为0时用户正常登录，返回1时用户登录失败，同时给用户发送邮件）
push "redirect-gateway def1 bypass-dhcp" #指定客户端连接后使用vpn作为默认网关
 
##push to client
max-clients 100
;push "route 192.168.56.0 255.255.255.0"   #可以给客户端推送路由
 
##DNS-Server
push "dhcp-option DNS 8.8.8.8"  #推送dns
push "dhcp-option DNS 8.8.4.4"
 
##script connect-disconnect
script-security 3 system
client-connect /etc/openvpn/script/connect.sh         #指定用户验证通过后连接VPN时触发脚本（记录用户login时间）
client-disconnect /etc/openvpn/script/disconnect.sh   #指定用户断开vpn时触发脚本（记录用户logout时间）
 
##log-status
status openvpn-status.log
log openvpn.log
log-append openvpn.log
verb 3

2、脚本
脚本中使用了数据库做简单的存储，这里仅作为示例。
[root@tvm-test openvpn]# ls script/
config.sh  connect.sh  disconnect.sh  login.sh  sendEmail
1）数据库的参数
[root@tvm-test openvpn]# cat script/config.sh 
#!/bin/bash
##Dababase Server
HOST='localhost'
#Default port = 3306
PORT='3306'
#Username
USER='openvpn'
#Password
PASS='openvpnpass'
#database name
DB='openvpn'

2）连接vpn时
[root@tvm-test openvpn]# cat script/connect.sh 
#!/bin/bash
. /etc/openvpn/script/config.sh
##insert data connection to table log
mysql -h$HOST -P$PORT -u$USER -p$PASS $DB -e "INSERT INTO log (log_id,user_id,log_trusted_ip,log_trusted_port,log_remote_ip,log_remote_port,log_start_time,log_end_time,log_received,log_send) VALUES(NULL,'$common_name','$trusted_ip','$trusted_port','$ifconfig_pool_remote_ip','$remote_port_1',now(),'0000-00-00 00:00:00','$bytes_received','$bytes_sent')"
##set status online to user connected
mysql -h$HOST -P$PORT -u$USER -p$PASS $DB -e "UPDATE user SET user_online=1 WHERE user_id='$common_name'"

3）断开时
[root@tvm-test openvpn]# cat script/disconnect.sh 
#!/bin/bash
. /etc/openvpn/script/config.sh
##set status offline to user disconnected
mysql -h$HOST -P$PORT -u$USER -p$PASS $DB -e "UPDATE user SET user_online=0 WHERE user_id='$common_name'"
##insert data disconnected to table log
mysql -h$HOST -P$PORT -u$USER -p$PASS $DB -e "UPDATE log SET log_end_time=now(),log_received='$bytes_received',log_send='$bytes_sent' WHERE log_trusted_ip='$trusted_ip' AND log_trusted_port='$trusted_port' AND user_id='$common_name' AND log_end_time='0000-00-00 00:00:00'"

4）登录时
[root@tvm-test openvpn]# cat script/login.sh 
#!/bin/bash

. /etc/profile
. /etc/openvpn/script/config.sh

##Authentication
mysqlbin="mysql -h$HOST -P$PORT -u$USER -p$PASS $DB -sN -e"
user_id=$($mysqlbin "select user_id from user where user_id = '$username' AND user_pass = '$password' AND user_enable=1 AND user_start_date != user_end_date AND TO_DAYS(now()) >= TO_DAYS(user_start_date) AND (TO_DAYS(now()) <= TO_DAYS(user_end_date) OR user_end_date='0000-00-00')")

if [[ "$user_id" != '' && "$user_id" = "$username" ]];then
    echo "user : $username"
    echo 'authentication ok.'
    exit 0
else
    context=$($mysqlbin "select user_id,user_pass,user_enable,user_end_date,user_mail,user_phone from user where user_id = '$username'")
    if [ "x$context" == "x" ];then
        exit 1
    else
        user_id="$username"
        user_pass=`echo $context|awk '{print $2}'`
        user_enable=`echo $context|awk '{print $3}'`
        user_end_date=`echo $context|awk '{print $4}'`
        user_mail=`echo $context|awk '{print $5}'`
        user_phone=`echo $context|awk '{print $6}'`
        user_end_date=$(date -d $user_end_date +%s)
        msg="user: $user_id"
        now=$(date -d `date +%F` +%s)
        pw=`date +%N|cut -c1-6`
        status=0
        if [ "x$user_pass" != "x$password" ];then
            status=0
            msg="$msg 密码错误 "
        fi
        if [ "$user_enable" != "1" ];then
            status=1
            msg="$msg 被限制登录 "
        fi
        if [ "$user_end_date" -lt "$now" ];then
            status=1
            msg="$msg 账号过期 "
        fi
        echo "`date +%F' '%T` $msg" >> /tmp/a.txt
        if [ $status -eq 0 ];then
            pass_last_change=$($mysqlbin "select pass_last_change from user where user_id = '$username'")
            pass_last_change=$(date -d "$pass_last_change" +%s)
            if [ $((`date +%s`-$pass_last_change)) -lt 600 ];then           
                pw=$($mysqlbin "select user_pass from user where user_id = '$username'")
            else
                $mysqlbin "UPDATE user SET user_pass='$pw',pass_last_change=now() where user_id = '$username'" #实现密码更新
            fi
            msg="user: $user_id passcode: $pw"
        else
            msg="$msg"
        fi
        # send message
        # email # 这里发送邮件账号根据实际情况设置，也可以调用短信接口，微信接口等
        mail xxxx(这里自己实现)
        exit 1
    fi
fi


# 此脚本返回为0时，用户能正常登录，返回为1时拒绝登录
# 脚本运行时从系统读取用户登录的变量username,password，然后对这两个变量进行相应的判断，返回相应的结果，实现用户验证
# 实现原理已经说清楚了，那么想实现什么功能就自己发挥想像了



3、数据库
[root@tvm-test openvpn]# ls sql/
create_db.sql  test_user.sql
1）创建db
[root@tvm-test openvpn]# cat sql/create_db.sql 
CREATE DATABASE openvpn;
USE openvpn;
CREATE TABLE `user` (
              `user_id` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
              `user_pass` varchar(32) COLLATE utf8_unicode_ci NOT NULL DEFAULT '6s34sdf4w5s2',
              `user_mail` varchar(64) COLLATE utf8_unicode_ci DEFAULT NULL,
              `user_phone` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
              `user_online` tinyint(1) NOT NULL DEFAULT '0',
              `user_enable` tinyint(1) NOT NULL DEFAULT '1',
              `pass_last_change` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
              `user_end_date` date NOT NULL DEFAULT '2049-01-01',
              `user_start_date` date NOT NULL DEFAULT '2014-01-01',
              `user_alias` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
              PRIMARY KEY (`user_id`),
              KEY `user_pass` (`user_pass`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;


CREATE TABLE `log` (
              `log_id` int(10) unsigned NOT NULL AUTO_INCREMENT,
              `user_id` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
              `log_trusted_ip` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
              `log_trusted_port` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
              `log_remote_ip` varchar(32) COLLATE utf8_unicode_ci DEFAULT NULL,
              `log_remote_port` varchar(16) COLLATE utf8_unicode_ci DEFAULT NULL,
              `log_start_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
              `log_end_time` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
              `log_received` float NOT NULL DEFAULT '0',
              `log_send` float NOT NULL DEFAULT '0',
              PRIMARY KEY (`log_id`),
              KEY `user_id` (`user_id`)
            ) ENGINE=InnoDB AUTO_INCREMENT=56 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

2）创建一个测试号
[root@tvm-test openvpn]# cat sql/test_user.sql 
INSERT INTO `user` VALUES ('user1','user1pwd','user1@company.com','15800001111',1,1,'2015-8-7 16:39:00','2049-01-01','2014-01-01','Jack');

3）执行
[root@tvm-test openvpn]# mysql -uopenvpn -popenvpnpass openvpn -e 'source create_db.sql'
[root@tvm-test openvpn]# mysql -uopenvpn -popenvpnpass openvpn -e 'source test_user.sql'

四、测试客户端
win平台下载链接：http://swupdate.openvpn.org/community/releases/openvpn-2.2.2-install.exe 

[root@tvm-test openvpn]# cat client.ovpn 
client
dev tun
proto tcp  #指定协议
remote 192.168.56.251 43838  指定服务端地址和端口
resolv-retry infinite
nobind
persist-key
persist-tun
ca ca.crt
auth-user-pass
ns-cert-type server
comp-lzo
verb 3

将client.ovpn和keys/ca.crt拷贝到客户端机器openvpn的config目录下：
C:\Program Files (x86)\OpenVPN\config

以管理员启动openvpn客户端。

还可以将ca证书里面的内容也放到.ovpn这个配置文件中，追加到最后：
<ca>
-----BEGIN CERTIFICATE-----
xxxxxxxxx
-----END CERTIFICATE-----
</ca>


ZYXW、参考
1、朋友的脚本